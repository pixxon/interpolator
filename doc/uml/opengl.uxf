<?xml version="1.0" encoding="UTF-8"?><diagram program="umlet" version="11.3">
  <zoom_level>10</zoom_level>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>10</x>
      <y>80</y>
      <w>480</w>
      <h>340</h>
    </coordinates>
    <panel_attributes>Drawable
--
_vao: GLuint
_vbo: GLuint
_data: std::map&lt; int, std::vector&lt;float&gt; &gt;
_attrib: std::map&lt; int, int &gt;
--
+ Drawable()
+ ~Drawable()
+ setAttribute(channel: int, amount: int): void
+ addData(channel: int, data: std::vector&lt;float&gt;): void
+ init(): void
+ draw(mode: GLenum, amount: int): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>510</x>
      <y>80</y>
      <w>490</w>
      <h>340</h>
    </coordinates>
    <panel_attributes>ShaderProgram
--
- _uniforms: std::map&lt;std::string, GLuint&gt;
- _shaders: std::vector&lt;GLuint&gt;
- _program: GLuint
--
+ ShaderProgram()
+ ~ShaderProgram()
+ addShader(type: GLenum, file: std::string): void
+ bindAttribute(channel: int, name: std::string): void
+ linkProgram(): void
+ programOn(): void
+ programOff(): void
+ setUniform(uniform: std::string, vec: glm::vec2): void
+ setUniform(uniform: std::string, vec: glm::vec3): void
+ setUniform(uniform: std::string, vec: glm::vec4): void
+ setUniform(uniform: std::string, mat: glm::mat): void
+ setUniform(uniform: std::string, i: int): void
+ setUniform(uniform: std::string, f: float): void
- getUniformLocation(uniform: std::string): GLuint
- loadShader(type: GLenum, file: std::string): GLuint</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>1020</x>
      <y>80</y>
      <w>290</w>
      <h>340</h>
    </coordinates>
    <panel_attributes>Camera
--
- _proj: glm::mat4
- _view: glm::mat4
- _world: glm::mat4
--
+ Camera()
+ ~Camera()
+ setProj(proj: glm::mat4): void
+ setView(proj: glm::mat4): void
+ setWorld(proj: glm::mat4): void
+ getProj(): glm::mat4
+ getView(): glm::mat4
+ getWorld(): glm::mat4
+ getMVP(): glm::mat4
+ getWorldIT(): glm::mat4
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>580</x>
      <y>500</y>
      <w>360</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>OpenGLApp
--
_camera: Camera
_objects: std::map&lt;std::string, Drawable&gt;
_program: ShaderProgram
--
Update(): void
Render(): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>620</x>
      <y>390</y>
      <w>570</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>30;110;30;60;550;60;550;30</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>620</x>
      <y>390</y>
      <w>120</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>30;110;30;60;100;60;100;30</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>320</x>
      <y>390</y>
      <w>350</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>330;110;330;60;30;60;30;30</additional_attributes>
  </element>
</diagram>
